%prefix "parser"               # Define the parser prefix

%value "node*"                 # Set the return type for the parser actions (node*)

%auxil "manager_t *"           # For parser context

%header {
#include "symbol_enum.h"
#include "node.h"
#include <string>
#include <iostream>
#include <vector>

typedef struct {
    const char *input;  // Input buffer
    size_t pos;         // Current position in the buffer
} manager_t;
}

%source {
#include <iostream>

using namespace std;

#define PCC_GETCHAR(auxil) get_character(auxil)
#define PCC_BUFFERSIZE 1024

// Custom function to get one character at a time
static int get_character(manager_t *ctx) {
    if (ctx->input[ctx->pos] != '\0') {
        return ctx->input[ctx->pos++];  // Return the next character
    }
    return -1;  // End of input (EOF)
}

// Override the PCC_ERROR macro to handle syntax errors without exiting
#define PCC_ERROR(auxil) custom_syntax_error(auxil)

static void custom_syntax_error(manager_t *ctx) {
    fprintf(stderr, "Syntax error near position %zu: %s\n", ctx->pos, &ctx->input[ctx->pos]);
    // Optionally return to avoid exiting the program
}
}

statement
  <- _ f:Formula _ EOL { $$ = f; }
   / ( !EOL . )* EOL { $$ = nullptr; }

Formula
  <- f:Quantifier { $$ = f; }
   / f:IffFormula { $$ = f; }
   / f:AndFormula { $$ = f; }

Quantifier
  <- q:QuantifierOp _ c:ColonPredicate _ f:SimpleFormula {
      // construct the implication
      node* o = new node(LOGICAL_BINARY, SYMBOL_IMPLIES);
      o->children.push_back(c); // Push the left formula
      o->children.push_back(f); // Push the right formula
      // create the binder
      node* v = deep_copy(c->children[1]);
      q->children.push_back(v); // Push the variable
      q->children.push_back(o); // Push the implication
      bind_var(q, v->name());
      $$ = q;

  }
  / q:QuantifierOp _ v:Variable _ e:ELEM _ s:SimpleTerm _ f:SimpleFormula {
      // Create the element predicate
      std::vector<node*> children;
      children.push_back(e);  // Push the elem operator node
      children.push_back(v);  // Push the variable
      children.push_back(s);  // Push the second term
      node* elem_pred = new node(APPLICATION, children);
      // Create the implication
      node* o = new node(LOGICAL_BINARY, SYMBOL_IMPLIES);
      o->children.push_back(elem_pred); // Push the element predicate
      o->children.push_back(f); // Push the formula
      // bind variable here
      q->children.push_back(deep_copy(v)); // Push the variable
      q->children.push_back(o); // Push the implication
      bind_var(q, v->name());
      $$ = q;
  }
  / q:QuantifierOp _ v:Variable _ f:SimpleFormula {
      // bind variable here
      q->children.push_back(v); // Push the variable
      q->children.push_back(f); // Push the formula
      bind_var(q, v->name());
      $$ = q;

  }

QuantifierOp
  <- op:FORALL { $$ = op; }
   / op:EXISTS { $$ = op; }

IffFormula
  <- l:Formula _ o:ImpliesOp _ r:Formula {
      o->children.push_back(l); // Push the left formula
      o->children.push_back(r); // Push the right formula
      $$ = o;
  }

ImpliesOp
  <- o:IMPLIES { $$ = o; }
   / o:IFF { $$ = o; }

AndFormula
  <- l:OrFormula { $$ = l; }
    (_ o:WEDGE _ r:OrFormula {
        o->children.push_back($$); // Push the left formula
        o->children.push_back(r); // Push the right formula
        $$ = o;
    })*

OrFormula
  <- l:SimpleFormula { $$ = l; }
    (_ o:VEE _ r:SimpleFormula {
        o->children.push_back($$); // Push the left formula
        o->children.push_back(r); // Push the right formula
        $$ = o;
    })*

SimpleFormula
  <- f:Quantifier { $$ = f; }
   / f:EqualPredicate { $$ = f; }
   / f:NeqPredicate { $$ = f; }
   / f:SubsetPredicate { $$ = f; }
   / f:ElemPredicate { $$ = f; }
   / f:LeqPredicate { $$ = f; }
   / f:Predicate { $$ = f; }
   / f:Negation { $$ = f; }
   / f:TOP { $$ = f; }
   / f:BOT { $$ = f; }
   / OPEN _ f:Formula _ CLOSE { $$ = f; }

EqualPredicate
  <- t1:Term _ e:EQUALS _ t2:Term {
        std::vector<node*> children;
        children.push_back(e);  // Push the EQUALS operator node
        children.push_back(t1);  // Push the first term
        children.push_back(t2);  // Push the second term
        $$ = new node(APPLICATION, children);
    }

NeqPredicate
  <- t1:Term _ NEQ _ t2:Term {
        node *e = new node(BINARY_PRED, SYMBOL_EQUALS);
        std::vector<node*> children;
        children.push_back(e);  // Push the EQUALS operator node
        children.push_back(t1);  // Push the first term
        children.push_back(t2);  // Push the second term
        e = new node(APPLICATION, children);
        $$ = negate_node(e); // Negate node
    }

SubsetPredicate
  <- t1:Term _ o:SUBSETOP _ t2:Term {
        std::vector<node*> children;
        children.push_back(o);  // Push the subset operator node
        children.push_back(t1);  // Push the first term
        children.push_back(t2);  // Push the second term
        $$ = new node(APPLICATION, children);
  }

SUBSETOP
  <- o:SUBSETEQ { $$ = o; }
   / o:SUBSET { $$ = o; }

ElemPredicate
  <- t1:Term _ o:ELEM _ t2:Term {
        std::vector<node*> children;
        children.push_back(o);  // Push the elem operator node
        children.push_back(t1);  // Push the first term
        children.push_back(t2);  // Push the second term
        $$ = new node(APPLICATION, children);
  }

LeqPredicate
  <- t1:Term _ o:LEQ _ t2:Term {
        std::vector<node*> children;
        children.push_back(o);  // Push the elem operator node
        children.push_back(t1);  // Push the first term
        children.push_back(t2);  // Push the second term
        $$ = new node(APPLICATION, children);
  }

Predicate
  <- f:Application { f->children[0]->vdata->var_kind = PREDICATE; $$ = f; }
  / c:ColonPredicate { $$ = c; }

ColonPredicate
  <- i:Variable _ COLON _ s:Variable {
        std::vector<node*> children;
        children.push_back(s);  // Insert the structure name
        children.push_back(i);  // Insert the variable name
        s->vdata->var_kind = PREDICATE;
        s->vdata->structure = true; 
        
        $$ = new node(APPLICATION, children);
  }

Negation
  <- o:NEG _ f:SimpleFormula {
        o->children.push_back(f); // Push the formula
        $$ = o;
  }

Term
  <- t1:ExpOp { $$ = t1; }
     ( _ o:Op1 _ t2:ExpOp {
         std::vector<node*> children;
         children.push_back(o); // Push the op
         children.push_back($$); // Push the left argument
         children.push_back(t2); // Push the right argument
         $$ = new node(APPLICATION, children);
       })*

ExpOp
  <- t1:SimpleTerm _ o:EXP _ t2:SimpleTerm {
        std::vector<node*> children;
        children.push_back(o);  // Use the EXP node directly
        children.push_back(t1);  // Add the left term (argument)
        children.push_back(t2);  // Add the right term (argument)
        $$ = new node(APPLICATION, children);
    }
   / t:SimpleTerm { $$ = t; }

SimpleTerm
  <- t:Application { $$ = t; }
   / t:UnaryOp { $$ = t; }
   / t:Variable { $$ = t; }
   / t:Parenthesized { $$ = t; }
   / t:Tuple { $$ = t; }
   / t:EMPTYSET { $$ = t; }
   / t:ONE { $$ = t; }
   / t:MONE { $$ = t; }

Parenthesized
  <- OPEN _ t:Term _ CLOSE { $$ = t; }

Application
  <- i:Variable _ OPEN _ args:TermList _ CLOSE {
        std::vector<node*> children = args->children;  // Extract children from TermList
        i->vdata->var_kind = VariableKind::FUNCTION;
        children.insert(children.begin(), i);  // Insert the function/variable name at the start
        
        // Clear the args node's children to prevent it from deleting them
        args->children.clear();
        
        $$ = new node(APPLICATION, children);
        
        delete args;  // Clean up the args node after extracting its children
    }
   / i:Variable _ OPEN _ CLOSE {
        std::vector<node*> children; // empty children list
        i->vdata->var_kind = VariableKind::FUNCTION;
        children.insert(children.begin(), i);  // Insert the function/variable name at the start
        
        $$ = new node(APPLICATION, children);
        
   }

  Tuple
    <- OPEN _ args:TermList _ CLOSE {
        std::vector<node*> children = args->children;  // Extract children from TermList
      
        // Clear the args node's children to prevent it from deleting them
        args->children.clear();
        
        $$ = new node(TUPLE, children);
        
        delete args;  // Clean up the args node after extracting its children
      } 
    / OPEN _ CLOSE {
        std::vector<node*> children;

        $$ = new node(TUPLE, children);
    }

UnaryOp
  <- p:POWERSET _ OPEN _ t:Term _ CLOSE {
        std::vector<node*> children;
        children.push_back(p);  // Use the POWERSET node directly
        children.push_back(t);  // Add the term (argument)
        $$ = new node(APPLICATION, children);
    }
    
TermList
  <- head:Term {
        $$ = new node(TUPLE, std::vector<node*>());  // Initialize an empty vector
        $$->children.push_back(head);  // Add the head term to the children
    }
    (_ COMMA _ t:Term { $$->children.push_back(t); })*

Op1
  <- o:CAP { $$ = o; }
   / o:CUP { $$ = o; }
   / o:SETMINUS { $$ = o; }
   / o:TIMES { $$ = o; }
   / o:MUL { $$ = o; }

TOP
  <- '\\top' { $$ = new node(CONSTANT, SYMBOL_TOP); }

BOT
  <- '\\bot' { $$ = new node(CONSTANT, SYMBOL_BOT); }

CAP
  <- '\\cap' { $$ = new node(BINARY_OP, SYMBOL_CAP); }

CUP
  <- '\\cup' { $$ = new node(BINARY_OP, SYMBOL_CUP); }

SETMINUS
  <- '\\setminus' { $$ = new node(BINARY_OP, SYMBOL_SETMINUS); }

TIMES
  <- '\\times' { $$ = new node(BINARY_OP, SYMBOL_TIMES); }

POWERSET
  <- '\\mathcal{P}' { $$ = new node(UNARY_OP, SYMBOL_POWERSET); }

FORALL
  <- '\\forall' { $$ = new node(QUANTIFIER, SYMBOL_FORALL); }

EXISTS
  <- '\\exists' { $$ = new node(QUANTIFIER, SYMBOL_EXISTS); }

SUBSET
  <- '\\subset' { $$ = new node(BINARY_PRED, SYMBOL_SUBSET); }

SUBSETEQ
  <- '\\subseteq' { $$ = new node(BINARY_PRED, SYMBOL_SUBSETEQ); }

ELEM
  <- '\\in' { $$ = new node(BINARY_PRED, SYMBOL_ELEM); }

EQUALS
  <- '=' { $$ = new node(BINARY_PRED, SYMBOL_EQUALS); }

NEQ
  <- '\\neq'

LEQ
  <- '\\leq' { $$ = new node(BINARY_PRED, SYMBOL_LEQ); }

MUL
  <- '*' { $$ = new node(BINARY_OP, SYMBOL_MUL); }

EXP
  <- '^' { $$ = new node(BINARY_OP, SYMBOL_EXP); }

NEG
  <- '\\neg' { $$ = new node(LOGICAL_UNARY, SYMBOL_NOT); }

WEDGE
  <- '\\wedge' { $$ = new node(LOGICAL_BINARY, SYMBOL_AND); }

VEE
  <- '\\vee' { $$ = new node(LOGICAL_BINARY, SYMBOL_OR); }

IMPLIES
  <- '\\implies' { $$ = new node(LOGICAL_BINARY, SYMBOL_IMPLIES); }

IFF
  <- '\\iff' { $$ = new node(LOGICAL_BINARY, SYMBOL_IFF); }

EMPTYSET
  <- '\\emptyset' { $$ = new node(CONSTANT, SYMBOL_EMPTYSET); }

ONE
  <- '1' { $$ = new node(CONSTANT, SYMBOL_ONE); }

MONE
  <- '-1' { $$ = new node(CONSTANT, SYMBOL_MONE); }

OPEN
  <- '('

CLOSE
  <- ')'

COMMA
  <- ','

COLON
  <- ':'

Variable
  <- [a-zA-Z] [a-zA-Z0-9_]* { $$ = new node(VARIABLE, std::string($0)); }

_
  <- [ \t]*  # Whitespace

EOL
  <- '\n' / '\r\n' / '\r'


%prefix "parser"               # Define the parser prefix

%value "node*"                 # Set the return type for the parser actions (node*)

%auxil "manager_t *"           # For parser context

%header {
#include "symbol_enum.h"
#include "node.h"
#include <vector>
#include <iostream>

typedef struct {
    const char *input;  // Input buffer
    size_t pos;         // Current position in the buffer
} manager_t;
}

%source {
#include <iostream>

using namespace std;

#define PCC_GETCHAR(auxil) get_character(auxil)
#define PCC_BUFFERSIZE 1024

// Custom function to get one character at a time
static int get_character(manager_t *ctx) {
    if (ctx->input[ctx->pos] != '\0') {
        return ctx->input[ctx->pos++];  // Return the next character
    }
    return -1;  // End of input (EOF)
}
}

statement
  <- _ formula:Formula _ EOL { $$ = formula; }
   / ( !EOL . )* EOL { cout << "Syntax error!" << endl; $$ = nullptr; }

Formula
  <- EqualPredicate

EqualPredicate
  <- t1:Term _ e:EQUALS _ t2:Term {
      std::vector<node*> children;
      children.push_back(t1);
      children.push_back(t2);
      $$ = new node(SYMBOL_EQUALS, node::APPLICATION, children);
  }

Term
  <- Variable

TOP
  <- '\\top' { $$ = new node(SYMBOL_TOP, node::CONSTANT); }

BOT
  <- '\\bot' { $$ = new node(SYMBOL_BOT, node::CONSTANT); }

CAP
  <- '\\cap' { $$ = new node(SYMBOL_CAP, node::BINARY_OP); }

CUP
  <- '\\cup' { $$ = new node(SYMBOL_CUP, node::BINARY_OP); }

SETMINUS
  <- '\\setminus' { $$ = new node(SYMBOL_SETMINUS, node::BINARY_OP); }

TIMES
  <- '\\times' { $$ = new node(SYMBOL_TIMES, node::BINARY_OP); }

POWERSET
  <- '\\powerset' { $$ = new node(SYMBOL_POWERSET, node::UNARY_OP); }

FORALL
  <- '\\forall' { $$ = SYMBOL_FORALL; }

EXISTS
  <- '\\exists' { $$ = SYMBOL_EXISTS; }

SUBSET
  <- '\\subset' { $$ = new node(SYMBOL_SUBSET, node::BINARY_OP); }

SUBSETEQ
  <- '\\subseteq' { $$ = new node(SYMBOL_SUBSETEQ, node::BINARY_OP); }

EQUALS
  <- '=' { $$ = new node(SYMBOL_EQUALS, node::BINARY_OP); }

NEG
  <- '\\neg' { $$ = new node(SYMBOL_NOT, node::UNARY_OP); }

AND
  <- '\\wedge' { $$ = new node(SYMBOL_AND, node::BINARY_OP); }

OR
  <- '\\vee' { $$ = new node(SYMBOL_OR, node::BINARY_OP); }

OPEN
  <- '('

CLOSE
  <- ')'

DOT
  <- '.'

COMMA
  <- ','

Variable
  <- [a-zA-Z] [a-zA-Z0-9_]* { $$ = new node(std::string($0)); }

_
  <- [ \t]*

EOL
  <- '\n' / '\r\n' / '\r'

%%

// Main function for the parser
int main(int argc, char** argv) {
    manager_t mgr;
    std::string input;

    {
        parser_context_t *ctx = parser_create(&mgr);
        node* ast = nullptr;

        std::cout << "> ";

        while (getline(std::cin, input)) {
            input.push_back('\n');  // Add a newline at the end of input

            // Set the input buffer and reset position
            mgr.input = input.c_str();
            mgr.pos = 0;
            
            parser_parse(ctx, &ast);

            if (ast) {
                ast->print();
                delete ast;  // Manually free the AST
                ast = nullptr;
            }

            std::cout << "> ";
        }

        std::cout << std::endl;

        parser_destroy(ctx);
    }

    return 0;
}
